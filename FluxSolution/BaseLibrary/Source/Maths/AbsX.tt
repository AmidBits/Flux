<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Numerics" #>

<# Type[] signed = new[] { typeof(System.Numerics.BigInteger), typeof(System.Decimal), typeof(System.Double), typeof(System.Single), typeof(System.Int32), typeof(System.Int64) };#>

namespace Flux
{
  public static partial class Maths
  {

    <# foreach (var type in signed) { #>

    /// <summary>Returns the absolute (positive) value of the signed value.</summary>
	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static <#= type.FullName #> AbsX(<#= type.FullName #> value)
    <# if (type.FullName == "System.Numerics.BigInteger") { #>
    => System.Numerics.BigInteger.Abs(value);
    <# } else { #>
    => System.Math.Abs(value);
    <# } #>

    <# } #>

  }
}
