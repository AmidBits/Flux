<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Numerics" #>

<# Type[] numerics = new[] { typeof(System.Numerics.BigInteger), typeof(System.Decimal), typeof(System.Double), typeof(System.Single), typeof(System.Int32), typeof(System.Int64) };#>

using System.Linq;

namespace Flux
{
  public static partial class Maths
  {

    <# foreach (var type in numerics) { #>

    /// <summary>Snaps the value to the nearest interval if it's within the specified distance of an interval.</summary>
    public static <#= type.FullName #> DetentIntervalX(<#= type.FullName #> value, <#= type.FullName #> interval, <#= type.FullName #> distance)
    <# if (type.FullName == "System.Numerics.BigInteger") { #>
    => (value / interval) * interval is var nearestInterval && System.Numerics.BigInteger.Abs(nearestInterval - value) < distance ? nearestInterval : value;
    <# } else { #>
    => value / interval * interval is var nearestInterval && System.Math.Abs(nearestInterval - value) < distance ? nearestInterval : value;
    <# } #>

    /// <summary>Determines whether a value is within a specified positive distance of the position, and if so, snaps the value to the position.</summary>
    public static <#= type.FullName #> DetentPositionX(<#= type.FullName #> value, <#= type.FullName #> position, <#= type.FullName #> distance)
    <# if (type.FullName == "System.Numerics.BigInteger") { #>
    => System.Numerics.BigInteger.Abs(position - value) > System.Numerics.BigInteger.Abs(distance) ? value : position;
    <# } else { #>
    => System.Math.Abs(position - value) > System.Math.Abs(distance) ? value : position;
    <# } #>

    /// <summary>Snaps the value to zero if it's within the specified distance of zero.</summary>
    public static <#= type.FullName #> DetentZeroX(<#= type.FullName #> value, <#= type.FullName #> distance)
      => value < -distance || value > distance ? value : 0;

    <# } #>

  }
}
