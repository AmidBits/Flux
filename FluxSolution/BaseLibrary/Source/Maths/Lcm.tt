<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Numerics" #>

<# Type[] integers = new[] { typeof(System.Numerics.BigInteger), typeof(System.Int32), typeof(System.Int64) };#>

using System.Linq;

namespace Flux
{
  public static partial class Maths
  {

    <# foreach (var type in integers) { #>

    /// <summary>Returns the least common multiple of all (and at least two) values.</summary>
    /// <see cref="https://en.wikipedia.org/wiki/Least_common_multiple"/>
    public static <#= type.FullName #> LcmX(params <#= type.FullName #>[] values)
      => (values?.Length ?? throw new System.ArgumentNullException(nameof(values))) >= 2 ? values.Skip(1).Aggregate(values[0], LeastCommonMultipleX) : throw new System.ArgumentOutOfRangeException(nameof(values));

    /// <summary>Returns the least common multiple of two System.Numerics.BigInteger values.</summary>
    /// <see cref="https://en.wikipedia.org/wiki/Least_common_multiple"/>
    public static <#= type.FullName #> LeastCommonMultipleX(<#= type.FullName #> a, <#= type.FullName #> b)
    {
      if (a < 0) throw new System.ArgumentOutOfRangeException(nameof(a));
      if (b < 0) throw new System.ArgumentOutOfRangeException(nameof(b));

      var i = b;
      while (b % a != 0)
        b += i;
      return b;
    }

    <# } #>

  }
}
