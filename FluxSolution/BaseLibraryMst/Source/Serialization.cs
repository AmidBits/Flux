using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using Flux;

namespace Serialization
{
  [System.Serializable]
  public class Person
  {
    public string Name { get; set; }
  }

  [TestClass]
  public class Binary
  {
    Person person = new Person() { Name = "X" };

    byte[] expect = new byte[] { 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x45, 0x42, 0x61, 0x73, 0x65, 0x4C, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4D, 0x73, 0x74, 0x2C, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x31, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x30, 0x2C, 0x20, 0x43, 0x75, 0x6C, 0x74, 0x75, 0x72, 0x65, 0x3D, 0x6E, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6C, 0x2C, 0x20, 0x50, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x4B, 0x65, 0x79, 0x54, 0x6F, 0x6B, 0x65, 0x6E, 0x3D, 0x6E, 0x75, 0x6C, 0x6C, 0x05, 0x01, 0x00, 0x00, 0x00, 0x14, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x50, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x01, 0x00, 0x00, 0x00, 0x15, 0x3C, 0x4E, 0x61, 0x6D, 0x65, 0x3E, 0x6B, 0x5F, 0x5F, 0x42, 0x61, 0x63, 0x6B, 0x69, 0x6E, 0x67, 0x46, 0x69, 0x65, 0x6C, 0x64, 0x01, 0x02, 0x00, 0x00, 0x00, 0x06, 0x03, 0x00, 0x00, 0x00, 0x01, 0x58, 0x0B };

    [TestMethod]
    public void CloneBinary()
    {
      Assert.AreEqual(person.Name, Flux.Serialize.CloneBinary<Person>(person).Name);
    }

    [TestMethod]
    public void FromBinary()
    {
      Assert.AreEqual(person.Name, Flux.Serialize.FromBinary<Person>(expect).Name);
    }

    [TestMethod]
    public void ToBinary()
    {
      CollectionAssert.AreEqual(expect, Flux.Serialize.ToBinary(person));
    }
  }

  [TestClass]
  public class Json
  {
    Person person = new Person() { Name = "X" };

    readonly string expect = "{\"Name\":\"X\"}";

    [TestMethod]
    public void CloneJson()
    {
      Assert.AreEqual(person.Name, Flux.Serialize.CloneJson<Person>(person).Name);
    }

    [TestMethod]
    public void FromJson()
    {
      Assert.AreEqual(person.Name, Flux.Serialize.FromJson<Person>(expect).Name);
    }

    [TestMethod]
    public void ToJson()
    {
      Assert.AreEqual(expect, Flux.Serialize.ToJson(person));
    }
  }

  [TestClass]
  public class Xml
  {
    Person person = new Person() { Name = "X" };

    string expect = "<Person><Name>X</Name></Person>";

    [TestMethod]
    public void CloneXml()
    {
      Assert.AreEqual(person.Name, Flux.Serialize.CloneXml<Person>(person).Name);
    }

    [TestMethod]
    public void FromXml()
    {
      Assert.AreEqual(person.Name, Flux.Serialize.FromXml<Person>(expect).Name);
    }

    [TestMethod]
    public void ToXml()
    {
      Assert.AreEqual(expect, Flux.Serialize.ToXml(person));
    }
  }
}
